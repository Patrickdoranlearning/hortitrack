import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

type AnyDate = Date | string | number | null | undefined;
const fmt = (d: AnyDate) => {
  if (!d) return "";
  try {
    const dd = new Date(d);
    return dd.toISOString().slice(0, 10);
  } catch {
    return String(d);
  }
};

function wrapText(text: string, maxChars: number) {
  const words = String(text || "").split(/\s+/);
  const lines: string[] = [];
  let line = "";
  for (const w of words) {
    if ((line + " " + w).trim().length <= maxChars) {
      line = (line + " " + w).trim();
    } else {
      if (line) lines.push(line);
      line = w;
    }
  }
  if (line) lines.push(line);
  return lines;
}

export async function renderProtocolPdf(protocol: any): Promise<Uint8Array> {
  const pdf = await PDFDocument.create();
  let page = pdf.addPage([595.28, 841.89]); // A4 portrait
  const font = await pdf.embedFont(StandardFonts.Helvetica);
  const bold = await pdf.embedFont(StandardFonts.HelveticaBold);

  const margin = 40;
  let y = page.getHeight() - margin;

  const drawText = (text: string, opts?: { size?: number; bold?: boolean; color?: [number, number, number] }) => {
    const size = opts?.size ?? 12;
    const f = opts?.bold ? bold : font;
    const color = opts?.color ? rgb(...opts.color) : rgb(0, 0, 0);
    
    if (y - size < margin) {
        page = pdf.addPage([595.28, 841.89]);
        y = page.getHeight() - margin;
    }

    page.drawText(text, { x: margin, y: y - size, size, font: f, color });
    y -= size + 6;
  };

  // Header
  drawText(protocol.name || "Protocol", { size: 18, bold: true });
  drawText(`Version: ${protocol.version ?? 1}   Status: ${protocol.status ?? "draft"}`, { size: 11 });
  drawText(`Created: ${fmt(protocol.createdAt)}   From Batch: ${protocol.sourceSnapshot.batchNumber || "-"}`, { size: 11 });
  y -= 10;

  // Plant details
  drawText("Plant Details", { size: 14, bold: true });
  drawText(`Family: ${protocol.plantFamily ?? "-"}`, { size: 11 });
  drawText(`Variety: ${protocol.plantVariety ?? "-"}`, { size: 11 });
  drawText(`Season: ${protocol.season ?? "-"}`, { size: 11 });
  y -= 6;

  // Inputs
  drawText("Inputs", { size: 14, bold: true });
  drawText(`Pot Size: ${protocol.potSize ?? "-"}`, { size: 11 });
  drawText(`Media/Substrate: ${protocol.media ?? "-"}`, { size: 11 });
  drawText(`Container: ${protocol.containerType ?? "-"}`, { size: 11 });

  y -= 6;

  // Targets
  const t = protocol.targets || {};
  drawText("Targets", { size: 14, bold: true });
  drawText(
    `Temp (°C): Day ${t?.tempC?.day ?? "-"} / Night ${t?.tempC?.night ?? "-"}`, { size: 11 }
  );
  drawText(`Humidity (%): ${t?.humidityPct ?? "-"}`, { size: 11 });
  drawText(`Light (hrs): ${t?.lightHours ?? "-"}`, { size: 11 });
  drawText(`EC: ${t?.ec ?? "-"}    pH: ${t?.ph ?? "-"}`, { size: 11 });
  drawText(`Spacing: ${t?.spacing ?? "-"}`, { size: 11 });

  y -= 8;
  drawText("Steps", { size: 14, bold: true });

  const steps: Array<any> = Array.isArray(protocol.steps) ? protocol.steps : [];
  const bullet = "• ";
  const maxChars = 90;

  for (let i = 0; i < steps.length; i++) {
    const s = steps[i] || {};
    const title = String(s.title || "Step");
    const line = `${title}${s.kind ? ` (${s.kind})` : ""}${s.intervalDays ? ` — every ${s.intervalDays} days` : ""}`;
    const lines = [line, ...(s.notes ? wrapText(s.notes, maxChars) : [])];

    for (const ln of lines) {
      const size = 11;
      const h = size + 6;
      if (y - h < margin) {
        page = pdf.addPage([595.28, 841.89]);
        y = page.getHeight() - margin;
      }
      page.drawText(bullet + ln, { x: margin, y: y - size, size, font });
      y -= h;
    }
    y -= 2;
  }

  y -= 8;
  drawText("Source Snapshot", { size: 14, bold: true });
  const ss = protocol.sourceSnapshot || {};
  drawText(`Batch Number: ${ss.batchNumber ?? "-"}`, { size: 11 });
  drawText(`Sow Date: ${fmt(ss.sowDate)}    Planting Date: ${fmt(ss.plantingDate)}`, { size: 11 });
  drawText(`Size: ${ss.size ?? "-"}    Location: ${ss.location ?? "-"}`, { size: 11 });

  // Footer
  const footer = "Generated by HortiTrack";
  page.drawText(footer, {
    x: margin,
    y: 20,
    size: 9,
    font,
    color: rgb(0.3, 0.3, 0.3),
  });

  return await pdf.save();
}
